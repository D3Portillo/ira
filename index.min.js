const INIT_IRA_CONFIG={headers:{},debug:!1,parseBlob:!0},IRA_METHODS={get:"GET",put:"PUT",post:"POST",head:"HEAD",delete:"DELETE",connect:"CONNECT",options:"OPTIONS",trace:"TRACE"},IRA_METHODS_WITHOUT_BODY=[IRA_METHODS.get,IRA_METHODS.head,IRA_METHODS.delete],DEFAULT_METHOD_OPTIONS={acceptsBody:!0},IRA="IraFetch >>>",deepify=(e={})=>{const t={};return Object.keys(e).forEach(o=>{let r=e[o];"string"!=typeof r&&(r=JSON.stringify(r)),t[o]=r}),t};var persistentIraConfig={...INIT_IRA_CONFIG};const makeIraFetch=(e="GET",t=DEFAULT_METHOD_OPTIONS)=>(o,r={},a={})=>{a={...INIT_IRA_CONFIG,...a};let{headers:s={},body:c=""}=r;s=deepify({...a.headers,...s});(s["Content-Type"]||"").includes("json")&&(c=deepify(c));try{const{fetch:n}=window;if(!n)throw new Error("Not inside a browser");if(!o)throw new Error("URL not provided");return new Promise(I=>{n(o,{...r,method:e,headers:s,...t.acceptsBody?{body:c}:{}}).then(e=>{const{ok:t,status:n,statusText:i}=e,d=e.clone();Promise.all([e.text(),a.parseBlob?d.blob():null]).then(([d,p])=>{"string"==typeof p&&([d,p]=[p,d]);let T={};try{T=JSON.parse(d)}catch(e){}I({data:{json:T,text:d,blob:p},ok:t,status:n,statusText:i,statusCode:n,error:null}),a.debug&&console.info(`${IRA} REQ_URL='${o}' >>> FULL_REQ_DATA: `,{headers:s,body:c,config:a,extra:r,response:e})})}).catch(e=>{throw console.error(`${IRA}, got error on request. REQ_URL='${o}' >>> FULL_REQ_DATA: `,{error:e,headers:s,config:a,extra:r}),I({data:null,ok:!1,status:status,statusText:e,statusCode:500,error:e}),e})})}catch(e){console.error(`${IRA} ${e}`)}};function ira(e="string",t=INIT_IRA_CONFIG){return makeIraFetch(IRA_METHODS.get,{acceptsBody:!1})(e,t)}ira.get=makeIraFetch(IRA_METHODS.get,{acceptsBody:!1}),ira.head=makeIraFetch(IRA_METHODS.head,{acceptsBody:!1}),ira.delete=makeIraFetch(IRA_METHODS.delete,{acceptsBody:!1}),ira.put=makeIraFetch(IRA_METHODS.put,{acceptsBody:!0}),ira.post=makeIraFetch(IRA_METHODS.post,{acceptsBody:!0}),ira.connect=makeIraFetch(IRA_METHODS.connect,{acceptsBody:!0}),ira.options=makeIraFetch(IRA_METHODS.options,{acceptsBody:!0}),ira.trace=makeIraFetch(IRA_METHODS.trace,{acceptsBody:!0}),ira._config={};const setIraConfig=(e={})=>{persistentIraConfig={...persistentIraConfig,...e},ira._config=persistentIraConfig};ira.config=()=>setIraConfig(config),ira.extend=e=>{const t=(e,t)=>null,o={get:t,put:t,post:t,head:t,delete:t,connect:t,options:t,trace:t};return Object.keys(methods).map(t=>{const r=makeIraFetch(t.toUpperCase(),{acceptsBody:!IRA_METHODS_WITHOUT_BODY.includes(t)});o[t]=(t,o)=>r(t,o,e)}),o},ira.reset=()=>setIraConfig(INIT_IRA_CONFIG),window.ira=ira,module="object"==typeof module?module:{},module.exports=ira;